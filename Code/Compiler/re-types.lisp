(in-package :one-more-re-nightmare)

(define-type (literal set))

(defun empty-set ()
  (literal (symbol-set)))
(defun universal-set ()
  (literal (set-inverse (symbol-set))))
(trivia:defpattern empty-set ()
  `(trivia:guard (literal set)
                 (set-null set)))

(define-type (empty-string)) ;; Îµ
(define-type (kleene r)
  :simplify (((kleene (kleene r)) (kleene r))
             ((kleene (empty-set)) (empty-string))))
(define-type (tag-set substitutions))
(define-type (either r s)
  :simplify (((either r s)
              (if (eq r s)
                  r
                  (trivia.next:next)))
             ((either (either r s) q)
              (if (eq s q)
                  (either r q)
                  (trivia.next:next)))
             ((either (either s r) q)
              (if (eq s q)
                  (either r q)
                  (trivia.next:next)))
             ((either q (either r s))
              (if (eq s q)
                  (either r q)
                  (trivia.next:next)))
             ((either q (either s r))
              (if (eq s q)
                  (either r q)
                  (trivia.next:next)))
             ((either (empty-set) r) r)
             ((either r (empty-set)) r)
             ((either (literal s1) (literal s2))
              (literal (set-union s1 s2)))))
(define-type (both r s)
  :simplify (((both r s)
              (if (eq r s)
                  r
                  (trivia.next:next)))
             ((both _ (empty-set)) (empty-set))
             ((both (empty-set) _) (empty-set))
             ((both (tag-set s) (empty-string))
              (tag-set s))
             ((both (empty-string) (tag-set s))
              (tag-set s))
             ((both (literal s1) (literal s2))
              (literal (set-intersection s1 s2)))))
(define-type (invert r)
  :simplify (((invert (invert r)) r)
             ((invert (literal set))
              (literal (set-inverse set)))
             ((invert (empty-string)) (empty-set))))
(define-type (join r s)
  :simplify (((join (empty-set) _) (empty-set))
             ((join _ (empty-set)) (empty-set))
             ((join (empty-string) r) r)
             ((join r (empty-string)) r)
             ((join (tag-set s) (either p r))
              (either (join (tag-set s) p)
                      (join (tag-set s) r)))
             ((join (tag-set s1) (join (tag-set s2) r))
              (join (tag-set (merge-sets s1 s2)) r))
             ((join (tag-set s1) (tag-set s2))
              (tag-set (merge-tag-sets s1 s2)))))

(defun text (vector)
  (reduce #'join (map 'vector (lambda (e)
                                (literal (symbol-set e)))
                      vector)
          :initial-value (empty-string) 
          :from-end t))
