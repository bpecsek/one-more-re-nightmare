(in-package :one-more-re-nightmare)

(defun derivative (re set)
  "Compute the derivative of a regular expression with regards to the set (i.e. the regular expression should be matched after a character in the set is matched, and the effects to execute prior to changing state)."
  (trivia:ematch re
    ((empty-string)
     (values (empty-set) '()))
    ((or (start-group _)
         (end-group _))
     (values (empty-set) (list re)))
    ((literal matching-set)
     (if (set-null (set-intersection matching-set set))
         (values (empty-set) '())
         (values (empty-string) '())))
    ((join r s)
     (multiple-value-bind (r* r-effects)
         (derivative r set)
       (let ((s* (derivative s set)))
         (values (if (nullable r)
                     (either (join r* s) s*)
                     (join r* s))
                 r-effects))))
    ((kleene r)
     (join (derivative r set) (kleene r)))
    ((either r s)
     (multiple-value-bind (r* r-effects)
         (derivative r set)
       (multiple-value-bind (s* s-effects)
           (derivative s set)
         (values (either r* s*)
                 (append (if (eq (empty-set) r*)
                             '() r-effects)
                         (if (eq (empty-set) s*)
                             '() s-effects))))))
    ((both r s)
     (multiple-value-bind (r* r-effects)
         (derivative r set)
       (multiple-value-bind (s* s-effects)
           (derivative s set)
         (values (both r* s*)
                 (append r-effects s-effects)))))
    ((invert r)
     (multiple-value-bind (r* r-effects)
         (derivative r set)
       (values (invert r*) r-effects)))))
